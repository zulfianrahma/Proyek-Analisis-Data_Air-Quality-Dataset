# -*- coding: utf-8 -*-
"""Proyek Analisis Data: E-Commerce Public Dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b2qZWyIm6G0HVOsRXVXBEUBBuVmPJo3K

# Proyek Analisis Data: E-Commerce Public Dataset
- Nama: Zulfian Rahmadiansyah
- Email: zulfianbelajar@gmail.com
- Dibuat: Selasa, 12 September 2023 (11.15 AM)
- Selesai: Jumat, 15 September 2023 (2.30 AM)

## Menentukan Pertanyaan Bisnis

- Bagaimana Performa Penjualan dan Revenue Perusahaan dalam Beberapa Bulan Terakhir?
- Produk Apa yang Paling Banyak dan Paling Sedikit Terjual?
- Bagaimana Demografi Pelanggan yang Kita Miliki?

## Menyiapkan semua library yang dibutuhkan
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

path = "https://raw.githubusercontent.com/zulfianrahma/Proyek-Analisis-Data_E-Commerce-Public-Dataset/main/E-Commerce%20Public%20Dataset%20(without%20Geolocation)"
list_files = ["customers_dataset.csv",
             "order_items_dataset.csv",
             "order_payments_dataset.csv",
             "order_reviews_dataset.csv",
              "orders_dataset.csv",
              "product_category_name_translation.csv",
              "products_dataset.csv",
              "sellers_dataset.csv"]

"""#### Memuat data *customers*"""

customers_df = pd.read_csv(os.path.join(path, list_files[0]))
customers_df.head()

"""#### Memuat data *order_items*"""

order_items_df = pd.read_csv(os.path.join(path, list_files[1]))
order_items_df.head()

"""#### Memuat data *order_payments*"""

order_payments_df = pd.read_csv(os.path.join(path, list_files[2]))
order_payments_df.head()

"""#### Memuat data *order_reviews*"""

order_reviews_df = pd.read_csv(os.path.join(path, list_files[3]))
order_reviews_df.head()

"""#### Memuat data *orders*"""

orders_df = pd.read_csv(os.path.join(path, list_files[4]))
orders_df.head()

"""#### Memuat data *product_category_name_translation*"""

product_translation_df = pd.read_csv(os.path.join(path, list_files[5]))
product_translation_df.head()

"""#### Memuat data *products*"""

products_df = pd.read_csv(os.path.join(path, list_files[6]))
products_df.head()

"""#### Memuat data *sellers*"""

sellers_df = pd.read_csv(os.path.join(path, list_files[7]))
sellers_df.head()

"""### Assessing Data

#### Menilai data *customers*

* Melihat informasi pada data
"""

customers_df.info()

"""* Melihat informasi terkait *missing values*"""

customers_df.isna().sum()

"""Hasil di atas menunjukkan bahwa tidak terdapat *missing values* pada data

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", customers_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

#### Menilai data *order_items*

* Melihat informasi pada data
"""

order_items_df.info()

"""* Melihat informasi terkait *missing values*"""

order_items_df.isna().sum()

"""Hasil di atas menunjukkan bahwa tidak terdapat *missing values* pada data

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", order_items_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

* Melihat parameter statistik pada data
"""

order_items_df.describe()

"""#### Menilai data *order_payments*

* Melihat informasi pada data
"""

order_payments_df.info()

"""* Melihat informasi terkait *missing values*"""

order_payments_df.isna().sum()

"""Hasil di atas menunjukkan bahwa tidak terdapat *missing values* pada data

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", order_payments_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

* Melihat parameter statistik pada data
"""

order_payments_df.describe()

"""#### Menilai data *order_reviews*

* Melihat informasi pada data
"""

order_reviews_df.info()

"""Terdapat kesalahan tipe data untuk kolom *review_creation_date* & *review_answer_timestamp*.


Kedua kolom tersebut harusnya direpresentasikan sebagai tipe data datetime, bukan object (tipe data object digunakan untuk tipe data string).

* Melihat informasi terkait *missing values*
"""

order_reviews_df.isna().sum()

"""Hasil di atas menunjukkan bahwa terdapat *missing values* pada kolom *review_comment_title* & *review_comment_message*.

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", order_reviews_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

* Melihat parameter statistik pada data
"""

order_reviews_df.describe()

"""#### Menilai data *orders*

* Melihat informasi pada data
"""

orders_df.info()

"""Terdapat kesalahan tipe data untuk kolom *order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date,* & *order_estimated_delivery_date*.


Kolom - kolom tersebut harusnya direpresentasikan sebagai tipe data datetime, bukan object (tipe data object digunakan untuk tipe data string).

* Melihat informasi terkait *missing values*
"""

orders_df.isna().sum()

"""Hasil di atas menunjukkan bahwa terdapat *missing values* pada kolom *order_approved_at, order_delivered_carrier_date,* & *order_delivered_customer_date*.

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", orders_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

* Melihat parameter statistik pada data
"""

orders_df.describe()

"""#### Menilai data *product_category_name_translation*

* Melihat informasi pada data
"""

product_translation_df.info()

"""* Melihat informasi terkait *missing values*"""

product_translation_df.isna().sum()

"""Hasil di atas menunjukkan bahwa tidak terdapat *missing values* pada data.

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", product_translation_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

#### Menilai data *products*

* Melihat informasi pada data
"""

products_df.info()

"""* Melihat informasi terkait *missing values*"""

products_df.isna().sum()

"""Hasil di atas menunjukkan bahwa terdapat *missing values* pada semua kolom kecuali *product_id*.

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", products_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

* Melihat parameter statistik pada data
"""

products_df.describe()

"""#### Menilai data *sellers*

* Melihat informasi pada data
"""

sellers_df.info()

"""* Melihat informasi terkait *missing values*"""

sellers_df.isna().sum()

"""Hasil di atas menunjukkan bahwa tidak terdapat *missing values* pada data

* Melihat informasi terkait duplikasi data
"""

print("Jumlah duplikasi: ", sellers_df.duplicated().sum())

"""Hasil di atas menunjukkan bahwa tidak terdapat duplikasi pada data

### Cleaning Data

Berdasarkan proses **Assessing Data** yang telah dilakukan sebelumnya, beberapa hal yang perlu dibersihkan (*cleaning*) pada data adalah berikut:

1. Data *order_reviews*:
- kesalahan tipe data (*review_creation_date & review_answer_timestamp*)
seharusnya tipe data datetime, bukan object
- terdapat missing values pada kolom *review_comment_title & review_comment_message*

2. Data *orders*:
- kesalahan tipe data (*order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date*)
seharusnya tipe data datetime, bukan object
- terdapat missing values pada kolom *order_approved_at, order_delivered_carrier_date, & order_delivered_customer_date*

3. Data *products*:
- terdapat missing values pada semua kolom kecuali kolom *product_id*

#### Membersihkan data *order_reviews*

Data *order_reviews*:
- kesalahan tipe data (*review_creation_date & review_answer_timestamp*)
seharusnya tipe data datetime, bukan object
- terdapat missing values pada kolom *review_comment_title & review_comment_message*

##### 1. Memperbaiki tipe data

- Mengganti tipe data pada kolom *review_creation_date & review_answer_timestamp* menjadi datetime menggunakan fungsi **to_datetime()**
"""

order_reviews_datetime_columns = ["review_creation_date", "review_answer_timestamp"]

for column in order_reviews_datetime_columns:
  order_reviews_df[column] = pd.to_datetime(order_reviews_df[column])

"""- Memeriksa kembali informasi terkait data"""

order_reviews_df.info()

"""- Melihat 5 baris teratas pada data"""

order_reviews_df.head()

"""##### 2. *Missing values*

- Melihat informasi pada data
"""

order_reviews_df.info()

"""- Melihat jumlah *missing values* pada data"""

order_reviews_df.isna().sum()

"""Berdasarkan hasil di atas, diketahui bahwa ternyata cukup banyak missing values pada kolom *review_comment_title* dan *review_comment_message*.

- Melihat data yang dimiliki oleh kolom *review_comment_title* dengan *missing values*
"""

order_reviews_df[order_reviews_df.review_comment_title.isna()]

"""- Melihat data yang dimiliki oleh kolom *review_comment_message* dengan *missing values*"""

order_reviews_df[order_reviews_df.review_comment_message.isna()]

"""Berdasarkan hasil - hasil di atas, diketahui bahwa ternyata masih banyak informasi penting yang dimiliki oleh baris yang memuat *missing values*.

Secara umum terdapat tiga metode untuk mengatasi missing value yaitu **dropping, imputation, dan interpolation**.

Kebetulan, data yang memuat *missing values* adalah informasi berupa tulisan atau *review* dari konsumen yang bersifat kualitatif dan cenderung digunakan untuk analisis sentimen. Sedangkan, terdapat informasi *review_score* yang memuat nilai *review* dari konsumen (kuantitatif) dan sudah mewakili penilaian *review* dari konsumen.

Oleh sebab itu, kolom yang memuat *missing values* (*review_comment_title* & *review_comment_message*) dapat dihilangkan (*dropping*) karena sudah diwakilkan oleh kolom *review_score*

- Melakukan proses *dropping* pada kolom yang telah ditentukan
"""

columns_to_drop = ['review_comment_title', 'review_comment_message']
order_reviews_df = order_reviews_df.drop(columns_to_drop, axis=1)

"""- Melihat informasi pada data"""

order_reviews_df.info()

"""- Melihat jumlah *missing values* pada data"""

order_reviews_df.isna().sum()

"""#### Membersihkan data *orders*

Data *orders*:
- kesalahan tipe data (*order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date*)
seharusnya tipe data datetime, bukan object
- terdapat missing values pada kolom *order_approved_at, order_delivered_carrier_date, & order_delivered_customer_date*

##### 1. Memperbaiki tipe data

- Mengganti tipe data pada kolom yang telah ditentukan (*order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date*) menjadi datetime menggunakan fungsi **to_datetime()**
"""

orders_datetime_columns = ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date', 'order_estimated_delivery_date']

for column in orders_datetime_columns:
  orders_df[column] = pd.to_datetime(orders_df[column])

"""- Memeriksa kembali informasi terkait data"""

orders_df.info()

"""- Melihat 5 baris teratas pada data"""

orders_df.head()

"""##### 2. *Missing values*

- Melihat informasi pada data
"""

orders_df.info()

"""- Melihat jumlah *missing values* pada data"""

orders_df.isna().sum()

"""Berdasarkan hasil di atas, diketahui bahwa ternyata cukup banyak *missing values* yang dimuat. Namun, jumlah tidak dapat dilakukan proses **imputation** atau **interpolation** berhubung informasi *missing values* tersebut berkaitan dengan waktu.

Selain itu, jumlah *missing value* tersebut juga relatif sedikit jika dibandingkan dengan keseluruhan data yang tersedia.

Oleh sebab itu, dilakukan proses *dropping* pada baris yang memuat *missing values*.

- Melakukan proses *dropping* baris yang memuat *missing values*
"""

orders_df.dropna(axis=0, inplace=True)

"""- Melihat informasi pada data"""

orders_df.info()

"""- Melihat jumlah *missing values* pada data"""

orders_df.isna().sum()

"""#### Membersihkan data *products*

Data *products*:
- terdapat missing values pada semua kolom kecuali kolom *product_id*

##### 1. *Missing values*

- Melihat informasi pada data
"""

products_df.info()

"""- Melihat jumlah *missing values* pada data"""

products_df.isna().sum()

"""Berdasarkan hasil di atas, diketahui bahwa ternyata jumlah *missing value* yang ada relatif sedikit jika dibandingkan dengan keseluruhan data yang tersedia.

Oleh sebab itu, dilakukan proses *dropping* pada baris yang memuat *missing values*.

- Melakukan proses *dropping* baris yang memuat *missing values*
"""

products_df.dropna(axis=0, inplace=True)

"""- Melihat informasi pada data"""

products_df.info()

"""- Melihat jumlah *missing values* pada data"""

products_df.isna().sum()

"""## Exploratory Data Analysis (EDA)

#### Eksplorasi data *customers*

- Melihat 5 sampel data _customers_df_
"""

customers_df.sample(5)

"""- Melihat rangkuman parameter statistik dari data *customers_df* menggunakan metode **describe()**."""

customers_df.describe(include='all')

"""- Melihat persebaran jumlah pelanggan berdasarkan kota (*city*) menggunakan metode **groupby()**."""

customers_df.groupby(by="customer_city").customer_unique_id.nunique().sort_values(ascending=False)

"""Berdasarkan hasil di atas, dapat dilihat bahwa persebaran pelanggan kita paling banyak berasal dari kota Sao Paulo (14984 pelanggan), diikuti dengan kota Rio de Janeiro (6620 pelanggan).

- Melihat persebaran jumlah pelanggan berdasarkan negara bagian (*state*) menggunakan metode **groupby()**.
"""

customers_df.groupby(by="customer_state").customer_unique_id.nunique().sort_values(ascending=False)

"""Berdasarkan hasil di atas, dapat dilihat bahwa persebaran pelanggan kita paling banyak berasal dari negara bagian SP (40302 pelanggan).

#### Eksplorasi data *order_items* dan *order_payments*

- Melihat rangkuman parameter statistik dari data *order_items*
"""

order_items_df.describe(include='all')

"""- Melihat rangkuman parameter statistik dari data *order_payments*"""

order_payments_df.describe(include='all')

"""- Melihat 5 sampel data *order_payments*"""

order_payments_df.sample(5)

"""- Memperoleh informasi terkait jumlah pada tiap jenis metode pembayaran"""

order_payments_df.groupby(by="payment_type").order_id.count()

"""- Membuat sebuah kolom baru bernama “status_payment” pada data _order_items_ untuk mengidentifikasi _items_ yang sudah dan belum terbayarkan"""

order_id_in_order_payments_df =  order_payments_df.order_id.tolist()
order_items_df["status_payment"] = order_items_df["order_id"].apply(lambda x: "Paid" if x in order_id_in_order_payments_df else "Not yet paid")
order_items_df.sample(5)

"""- Memperoleh informasi terkait jumlah pada tiap status pembayaran"""

order_items_df.groupby(by="status_payment").order_id.count()

"""- Melakukan merge terhadap *order_items* dan *order_payments*"""

order_items_payments_df = pd.merge(
    left=order_items_df,
    right=order_payments_df,
    how="outer",
    left_on="order_id",
    right_on="order_id"
)
order_items_payments_df.head()

"""#### Eksplorasi data *order_reviews* dan *orders*

- Melihat rangkuman parameter statistik dari data *order_reviews*
"""

order_reviews_df.describe(include='all')

"""- Melihat rangkuman parameter statistik dari data *orders*"""

orders_df.describe(include='all')

"""- Memperoleh informasi terkait jumlah pada tiap status pembelian"""

orders_df.groupby(by="order_status").order_id.count()

"""- Melakukan merge terhadap *order_reviews* dan *orders*"""

order_reviews_orders_df = pd.merge(
    left=order_reviews_df,
    right=orders_df,
    how="right",
    left_on="order_id",
    right_on="order_id"
)
order_reviews_orders_df.head()

"""#### Eksplorasi data *order_items*, *order_payments*, *order_reviews*, dan *orders*

- Melakukan merge terhadap *order_items*, *order_payments*, *order_reviews*, dan *orders*
"""

orders_all_df = pd.merge(
    left=order_reviews_orders_df,
    right=order_items_payments_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
orders_all_df.head()

"""- Memperoleh informasi terkait jumlah pada tiap *review_score*"""

orders_all_df.groupby(by="review_score").order_id.count()

"""- Memperoleh informasi terkait jumlah pada tiap *order_status*"""

orders_all_df.groupby(by="order_status").order_id.count()

"""- Memperoleh informasi terkait jumlah pada tiap jenis metode pembayaran"""

orders_all_df.groupby(by="payment_type").order_id.count()

"""#### Eksplorasi data *customers*, *sellers*, dan *orders_all*

* membuat sebuah kolom baru bernama “status” pada data _customers_df_ untuk mengidentifikasi pelanggan yang belum pernah melakukan order
"""

customer_id_in_orders_all_df =  orders_all_df.customer_id.tolist()
customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orders_all_df else "Non Active")
customers_df.sample(5)

"""* memperoleh informasi terkait jumlah pelanggan yang berstatus “Active” dan “Non Active”"""

customers_df.groupby(by="status").customer_id.count()

"""* melakukan merge terhadap data *orders_df* dan *customers_df*."""

orders_all_customers_df = pd.merge(
    left=orders_all_df,
    right=customers_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
orders_all_customers_df.head()

"""- Melihat informasi terkait hasil merge yang dihasilkan pada data *orders_all_customers_df*"""

orders_all_customers_df.info()

"""* melakukan merge terhadap data *orders_all_customers_df* dan *sellers_df*."""

orders_all_customers_sellers_df = pd.merge(
    left=orders_all_customers_df,
    right=sellers_df,
    how="left",
    left_on="seller_id",
    right_on="seller_id"
)
orders_all_customers_sellers_df.head()

"""* membuat pivot table untuk memperoleh informasi terkait jumlah order berdasarkan kota"""

orders_all_customers_sellers_df.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).reset_index().head(10)

"""* membuat pivot table untuk memperoleh informasi terkait jumlah order berdasarkan state"""

orders_all_customers_df.groupby(by="customer_state").order_id.nunique().sort_values(ascending=False)

"""* membuat pivot table untuk memperoleh informasi terkait jumlah order berdasarkan metode pembayaran"""

orders_all_customers_df.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False)

"""* membuat pivot table untuk memperoleh informasi terkait jumlah penjual berdasarkan kota"""

orders_all_customers_sellers_df.groupby(by="seller_city").order_id.nunique().sort_values(ascending=False).reset_index().head(10)

"""* membuat pivot table untuk memperoleh informasi terkait jumlah penjual berdasarkan state"""

orders_all_customers_sellers_df.groupby(by="seller_state").order_id.nunique().sort_values(ascending=False)

"""#### Eksplorasi data *product_category_name_translation* dan *products*

- Melihat 5 sampel data _product_category_name_translation_
"""

product_translation_df.sample(5)

"""- Melihat 5 sampel data _products_"""

products_df.sample(5)

"""- Melakukan merge terhadap *product_category_name_translation* dan *products*"""

products_all_df = pd.merge(
    left=product_translation_df,
    right=products_df,
    how="right",
    left_on="product_category_name",
    right_on="product_category_name"
)
products_all_df.head()

"""- Melihat rangkuman parameter statistik dari data *customers_df* menggunakan metode **describe()**."""

customers_df.describe(include='all')

"""#### Eksplorasi data *all_df*

* membuat sebuah DataFrame baru bernama _all_df_ untuk menampung semua informasi dari semua tabel yang kita miliki.
"""

all_df = pd.merge(
    left=orders_all_customers_sellers_df,
    right=products_all_df,
    how="left",
    left_on="product_id",
    right_on="product_id"
)
all_df.head()

"""- Melihat informasi pada data *all_df*"""

all_df.info()

"""* Melihat preferensi pembelian berdasarkan kategori barang"""

all_df.groupby(by="product_category_name_english").agg({
    "order_item_id": "sum",
    "price": "sum"
})

"""Berdasarkan hasil di atas, terlihat bahwa kategori barang yang paling laris terjual adalah **bed_bath_table**, yaitu sebanyak 14602 item. Sedangkan, untuk kategori barang yang mempunyai total hasil penjualan tertinggi adalah **health_beauty** sebanyak $1275856.38.

* Melihat preferensi pembelian berdasarkan kota.
"""

all_df.groupby(by=['customer_city', 'product_category_name_english']).agg({
    "order_item_id": "sum",
    "price": "sum"
})

"""Berdasarkan hasil di atas, terlihat bahwa kategori barang yang terjual pada setiap kota berbeda - beda.

- Menyimpan data *all_df* dalam berkas csv
"""

all_df.to_csv("all_data.csv", index=False)

"""## Visualization & Explanatory Analysis

### Pertanyaan 1: Bagaimana Performa Penjualan dan Revenue Perusahaan dalam Beberapa Bulan Terakhir?

* Mengubah frekuensi data untuk memperoleh informasi terkait jumlah order dan total revenue yang diperoleh setiap bulannya.
"""

monthly_orders_df = all_df.resample(rule='M', on='order_purchase_timestamp').agg({
    "order_id": "nunique",
    "price": "sum"
})

monthly_orders_df.index = monthly_orders_df.index.strftime('%Y-%m')
monthly_orders_df = monthly_orders_df.reset_index()

monthly_orders_df.rename(columns={
    "order_id": "order_count",
    "price": "revenue"
}, inplace=True)

monthly_orders_df.head()

"""* Membuat line chart terkait jumlah order per bulan."""

monthly_orders_df = all_df.resample(rule='M', on='order_purchase_timestamp').agg({
    "order_id": "nunique",
    "price": "sum"
})
monthly_orders_df.index = monthly_orders_df.index.strftime('%Y-%m') #mengubah format order date menjadi nama bulan

monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df.rename(columns={
    "order_id": "order_count",
    "price": "revenue"
}, inplace=True)

plt.figure(figsize=(10, 5))
plt.plot(monthly_orders_df["order_purchase_timestamp"], monthly_orders_df["order_count"], marker='o', linewidth=2, color="#72BCD4")
plt.title("Number of Orders per Month (2016-2018)", loc="center", fontsize=20)
plt.xticks(fontsize=10, rotation=45)
plt.yticks(fontsize=10)
plt.show()

"""Berdasarkan visualisasi di atas, kita dapat melihat bahwa jumlah order terbanyak terjadi pada bulan November 2017. Selain itu, kita juga dapat melihat adanya penurunan jumlah order pada bulan April, Juni, Desember 2017 dan Februari 2018.

* Membuat line chart terkait revenue per bulan.
"""

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df["order_purchase_timestamp"],
    monthly_orders_df["revenue"],
    marker='o',
    linewidth=2,
    color="#72BCD4"
)
plt.title("Total Revenue per Month (2016-2018)", loc="center", fontsize=20)
plt.xticks(fontsize=10, rotation=45)
plt.yticks(fontsize=10)
plt.show()

"""Beberapa penurunan jumlah orderan pada bulan April, Juni, Desember 2017 dan Februari 2018 berdampak terhadap penurunan revenue perusahaan. Penurunan paling signifikan terjadi pada Desember 2017.

Normalnya, kita harus mencari tahu penyebab terjadinya penurunan tersebut dengan mempertimbangkan banyak hal, seperti keberadaan kompetitor, campaign, dll. Namun, untuk studi kasus ini, kita tidak memiliki cukup informasi terkait hal tersebut.

### Pertanyaan 2: Produk Apa yang Paling Banyak dan Paling Sedikit Terjual?

* Membuat sebuah DataFrame baru guna menampung informasi terkait jumlah penjualan tiap produk.
"""

sum_order_items_df = all_df.groupby("product_category_name_english").order_item_id.sum().sort_values(ascending=False).reset_index()
sum_order_items_df.head(15)

"""* Membuat dua buah visualisasi data dalam satu gambar visual untuk mempermudah orang lain dalam mengidentifikasi produk dengan performa terbaik dan terburuk"""

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="order_item_id", y="product_category_name_english", data=sum_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="order_item_id", y="product_category_name_english", data=sum_order_items_df.sort_values(by="order_item_id", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Best and Worst Performing Product by Number of Sales", fontsize=20)
plt.show()

"""Berdasarkan gambar di atas, Anda dapat melihat bahwa produk **bed_bath_table** merupakan produk yang paling laris. Kontras dengan hal tersebut, produk **security_and_services** merupakan produk yang paling sedikit terjual.

### Pertanyaan 3: Bagaimana Demografi Pelanggan yang Kita Miliki?

* Membuat DataFrame baru untuk menampung informasi terkait jumlah pelanggan untuk demografi berdasarkan metode pembayaran
"""

bypayment_df = all_df.groupby(by="payment_type").customer_id.nunique().reset_index()
bypayment_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)

plt.figure(figsize=(10, 5))

sns.barplot(
    y="customer_count",
    x="payment_type",
    data=bypayment_df.sort_values(by="customer_count", ascending=False),
    palette=colors
)
plt.title("Number of Customer by Payment Type", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

"""Berdasarkan gambar di atas, diketahui bahwa kebanyakan pelanggan menggunakan kartu kredit sebagai metode pembayaran.

* Membuat DataFrame baru untuk menampung informasi terkait jumlah pelanggan untuk demografi berdasarkan *review_score* yang diberikan
"""

byrating_df = all_df.groupby(by="review_score").customer_id.nunique().reset_index()
byrating_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)

byrating_df['review_score'] = pd.Categorical(byrating_df['review_score'], [1, 2, 3, 4, 5])

colors_ = ["#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3",  "#72BCD4"]

plt.figure(figsize=(10, 5))

sns.barplot(
    y="customer_count",
    x="review_score",
    data=byrating_df.sort_values(by="customer_count", ascending=False),
    palette=colors_
)
plt.title("Number of Customer by Review Score", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

"""pelanggan yang kita miliki mayoritas memberikan nilai review tertinggi dengan poin 5.

* Membuat DataFrame baru untuk menampung informasi terkait jumlah pelanggan untuk demografi berdasarkan kota
"""

bycity_df = all_df.groupby(by="customer_city").customer_id.nunique().reset_index()
bycity_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)
bycity_df
plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
sns.barplot(
    x="customer_count",
    y="customer_city",
    data=bycity_df.sort_values(by="customer_count", ascending=False).head(10),
    palette=colors_
)
plt.title("Number of Customer by City", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()

"""Berdasarkan visualisasi data tersebut, dapat diketahui bahwa pelanggan yang kita miliki paling banyak berasal dari kota Sao Paulo

## Conclusion

- Jumlah order terbanyak terjadi pada bulan November 2017 (revenue tertinggi). Sedangkan, penurunan jumlah order terjadi pada bulan April, Juni, Desember 2017 dan Februari 2018 (penurunan revenue).


- Produk **bed_bath_table** merupakan produk yang paling laris. Kontras dengan hal tersebut, produk **security_and_services** merupakan produk yang paling sedikit terjual.


- Demografi pelanggan yang dimiliki dapat dikelompokkan menjadi beberapa kategori berikut:
  - Berdasarkan metode pembayarannya, pelanggan paling banyak menggunakan kartu kredit sebagai metode pembayarannya.
  - Berdasarkan *review_score* yang diberikan, pelanggan memberikan penilaian yang positif dengan mayoritas memberikan nilai tertinggi (skor 5)
  - Berdasarkan kota tempat tinggal, pelanggan terbanyak berasal dari Kota Sao Paulo.
"""

